# =============================================================================
# OpenTranscribe Backend - Production Dockerfile
# Multi-stage build optimized for security and minimal image size
# =============================================================================

# -----------------------------------------------------------------------------
# Stage 1: Build Stage - Install Python dependencies with compilation
# -----------------------------------------------------------------------------
FROM python:3.12.11-slim-bullseye AS builder

WORKDIR /build

# Install build dependencies (only in this stage)
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Copy only requirements first for better layer caching
COPY requirements.txt .

# Install Python dependencies
# Use --user to install to /root/.local which we'll copy to final stage
RUN pip install --user --no-cache-dir --no-warn-script-location -r requirements.txt

# -----------------------------------------------------------------------------
# Stage 2: Runtime Stage - Minimal production image
# -----------------------------------------------------------------------------
FROM python:3.12.11-slim-bullseye

# OCI annotations for metadata
LABEL org.opencontainers.image.title="OpenTranscribe Backend" \
      org.opencontainers.image.description="AI-powered transcription backend with WhisperX and PyAnnote" \
      org.opencontainers.image.vendor="OpenTranscribe" \
      org.opencontainers.image.authors="OpenTranscribe Contributors" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.source="https://github.com/yourusername/transcribe-app" \
      org.opencontainers.image.documentation="https://github.com/yourusername/transcribe-app/blob/main/README.md"

# Install only runtime dependencies (no build tools, no git, no curl)
RUN apt-get update && apt-get install -y --no-install-recommends \
    ffmpeg \
    libsndfile1 \
    libimage-exiftool-perl \
    libgomp1 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r appuser && \
    useradd -r -g appuser -u 1000 -m -s /bin/bash appuser && \
    mkdir -p /app /app/models /app/temp && \
    chown -R appuser:appuser /app

# Set working directory
WORKDIR /app

# Copy Python packages from builder stage
COPY --from=builder --chown=appuser:appuser /root/.local /home/appuser/.local

# Ensure scripts in .local are usable by adding to PATH
ENV PATH=/home/appuser/.local/bin:$PATH \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# Copy application code
COPY --chown=appuser:appuser . .

# Switch to non-root user
USER appuser

# Health check for container orchestration
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:8080/health').read()" || exit 1

# Expose application port
EXPOSE 8080

# Run application with auto-scaling workers (Uvicorn detects CPU cores)
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8080"]
