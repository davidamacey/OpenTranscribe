# Build stage
FROM node:22-alpine AS build

WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git

# Copy package files
COPY package.json package-lock.json ./

# Install dependencies
RUN npm ci

# Create static directory for fonts
RUN mkdir -p static/fonts

# Copy application code
COPY . .

# Ensure the fonts directory has the correct permissions
RUN chmod -R 755 static/fonts

# Build the application
RUN npm run build

# Production stage
FROM nginx:1.29.2-alpine3.22

# OCI annotations for container metadata and compliance
LABEL org.opencontainers.image.title="OpenTranscribe Frontend" \
      org.opencontainers.image.description="Svelte-based Progressive Web App for AI-powered transcription" \
      org.opencontainers.image.vendor="OpenTranscribe" \
      org.opencontainers.image.authors="OpenTranscribe Contributors" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.source="https://github.com/davidamacey/OpenTranscribe" \
      org.opencontainers.image.documentation="https://github.com/davidamacey/OpenTranscribe/blob/master/README.md"

# Copy the built files from the build stage
COPY --from=build /app/dist /usr/share/nginx/html

# Copy the nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Create non-root user and configure permissions for nginx
# Note: nginx user already exists in base image, just configure permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    mkdir -p /var/log/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    touch /var/run/nginx.pid && \
    chown nginx:nginx /var/run/nginx.pid

# Switch to non-root user
USER nginx

# Expose port 8080 (non-privileged port for non-root user)
EXPOSE 8080

# Add healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
